KERNEL VIRTUAL MACHINE TESTING TOOLS:
=====================================

This repository contains some tests for the Linux kernel, and tools to run
them.

A test is contained within a single executable file (typically a bash script)
that will be executed within a VM. Tests declare their dependencies, so that
the ktest tool can run them in the proper environment.

GETTING STARTED:
================

You'll need to build a root filesystem image for the virtual machines. There's a
script that fully automates this - it uses debootstrap, so you may have issues
if you're not running debian/ubuntu.

To use it, run (as root)
# root-image/create_debian_image root 

Stick it in /var/lib/ktest/root, that's where ktest looks for it by default.

TOOLS:

Symlink the ones you're using somewhere into your path - there's no install
procedure, they just expect to be run out of the git repository.

 * build-test-kernel

   This is what you'll use most of the time for interactive kernel development.
   It expects to be run from a Linux kernel source tree - it builds it, and runs
   the specified test.

   Normal usage:
   $ build-test-kernel run -I ~/ktest/tests/bcache/xfstests.ktest

   run builds a kernel and runs the specified test; there are other subcommands
   for interacting with a running test VM (sshing in, using kgdb, etc.).

   -I enables interactive mode (disables timeouts, enables kgdb instead of crash
   dumps)

 * ktest

   This is what build-test-kernel calls into after building a kernel. ktest
   takes a kernel image and a test, and parses the test and figures out the
   correct parameters for running the virtual machine

 * testy

   Simple tool for parsing "test lists" - files that specify which tests apply
   to which source files/directories, and optionally running the appropriate
   tests.

 * vm-start

   You'll probably never use this directly - this is the component that runs a
   virtual machine (or multiple virtual machines, for tests that require
   networking), creating scratch devices and networks (in userspace with
   vde_switch) and so on.

TESTS:
======

Tests are bash scripts; they specify dependencies/requirements (test libraries,
binaries, kernel config options, etc.) by calling various predefined bash
functions.

The test itself goes in a main() shell function; this will be run inside the VM.

TODO: real documentation. For now, look at example tests - or parse-test.sh,
which parses test requirements.
