#!/bin/bash -e

KTESTDIR=$(dirname $(readlink -f $0))
VMSTART=$KTESTDIR/vm-start

. $KTESTDIR/util.sh

DIR=.ktest
NJOBS=$((`grep ^processor /proc/cpuinfo |wc -l` * 2))

MAKE="make -j$NJOBS O=$DIR INSTALL_MOD_PATH=modules"
MAKE+=' EXTRA_CFLAGS="-gdwarf-4 -g3 -fvar-tracking -fvar-tracking-assignments"'

check_timeout()
{
	sleep $1
	$VMSTART stop `cat $DIR/id`
	kill $$
}

cmd_run()
{
	while getopts "t:" arg; do
		case $arg in
		h)
			echo "-t	timout in seconds" 
			;;
		t)
			TIMEOUT=$OPTARG
			;;
		esac
	done
	shift $(( OPTIND - 1 ))

	TEST=$1
	if [ -z "$TEST" ]; then
		echo "Specify a test to run"
		exit
	fi

	eval `$TEST deps`

	if [ -z "$MEM" ]; then
		echo "test must specify requirements"
		exit
	fi

	ln -sf $TEST $DIR/rc
	FILES=$DIR/rc
	TESTDIR=`dirname $TEST`

	OLDIFS=$IFS
	IFS=','
	PATH+=":/sbin:/usr/sbin:/usr/local/sbin"

	for req in $REQUIRE; do
		if [ -f "$TESTDIR/$req" ]; then
			FILES+=" $TESTDIR/$req"
		elif f="`which $req`"; then
			FILES+=" $f"
		else
			echo "Dependency $req not found"
			exit
		fi
	done

	for req in $LREQUIRE; do
		if [ ! -f "$req" ]; then
			echo "Dependency $f not found"
			exit
		fi
		FILES+=" $req"
	done
	IFS=$OLDIFS

	mkdir -p $DIR
	[ -f $DIR/.config ] || cp "$KTESTDIR/defconfig" "$DIR/.config"

	eval $MAKE || exit
	eval $MAKE modules_install

	# Remove symlinks, they'll break genisoimage which is following symlinks
	rm $DIR/modules/lib/modules/*/build
	rm $DIR/modules/lib/modules/*/source

	genisoimage -quiet -f -R -input-charset utf-8	\
		-o $DIR/run.iso 			\
		$DIR/modules/lib $FILES || exit
	rm -rf $DIR/modules

	if [ -n "$TIMEOUT" ]; then
		check_timeout "$TIMEOUT" &
		ALARM=$!
	fi

	$VMSTART start					\
		-i $IMG -t $TMPDIR			\
		-k $DIR/arch/x86/boot/bzImage		\
		-c $DIR/run.iso				\
		--id $DIR/id				\
		-m "$MEM"				\
		-s "$SCRATCH"				\
	|{
		sed -e '/TEST SUCCESS/q'
		[ -n "$ALARM" ] && kill $ALARM 2> /dev/null
		$VMSTART stop `cat $DIR/id`
		exit 0
	}
}

cmd_ssh()
{
	exec $VMSTART ssh `cat $DIR/id`
}

cmd_gdb()
{
	exec $VMSTART gdb `cat $DIR/id` $DIR/vmlinux
}

cmd_mon()
{
	exec $VMSTART mon `cat $DIR/id`
}

cmd_oldconfig()
{
	eval $MAKE oldconfig
}

cmd_config()
{
	eval $MAKE nconfig

}

usage()
{
	echo "ktest: Test kernels in virtual machines on a pool of remote servers"
	echo "Usage: ktest cmd [n]"
	echo "  run <testfile>	Compile and run a kernel and run <testfile>"
	echo "  ssh		Log in as root"
	echo "  gdb		Connect to kgdb"
	echo "  mon		Connect to qemu monitor"
	echo "  oldconfig	Run make oldconfig"
	echo "  config		Run make nconfig"
}

CMD="cmd_$1"
if [ -z "$1" -o "`type -t "$CMD"`" != "function" ]; then
	usage
	exit
fi
shift

if [ -f "/var/lib/ktest/root" ]; then
	IMG="/var/lib/ktest/root"
elif [ -f "$HOME/.ktest/root" ]; then
	IMG="$HOME/.ktest/root"
else
	echo "VM root filesystem not found, please create /var/lib/ktest/root or"
	echo "$HOME/.ktest/root"
	exit
fi

if [ -d "$HOME/.ktest/tmp" ]; then
	TMPDIR=$HOME/.ktest/tmp
else
	TMPDIR=/tmp
fi

checkdep genisoimage
checkdep minicom
checkdep socat
checkdep gcc
checkdep make

eval $CMD $@
