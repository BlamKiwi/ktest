#!/bin/bash -e

KTESTDIR=$(dirname $(readlink -f $0))
VMSTART=$KTESTDIR/vm-start

. $KTESTDIR/util.sh

DIR=.ktest

MAKE="make O=$DIR INSTALL_MOD_PATH=modules"
MAKE+=' EXTRA_CFLAGS="-gdwarf-4 -g3 -fvar-tracking -fvar-tracking-assignments"'

check_timeout()
{
    sleep $1
    $VMSTART stop `cat $DIR/id`
    kill $$
}

cmd_run()
{
    IMG=""
    KERNEL=""
    NJOBS=$((`grep ^processor /proc/cpuinfo |wc -l` * 2))

    run_usage()
    {
	echo "ktest run: Run a kernel test"
	echo "Usage: ktest run [options] test"
	echo "	-k	kernel"
	echo "	-i	VM root filesystem image"
	echo "	-t	timout in seconds"
	echo "	-j	j option to make"
    }

    while getopts "hk:i:t:j:" arg; do
	case $arg in
	    h)
		run_usage
		exit 0
		;;
	    k)
		KERNEL=$OPTARG
		;;
	    i)
		IMG=$OPTARG
		;;
	    t)
		TIMEOUT=$OPTARG
		;;
	    j)
		NJOBS=$OPTARG
		;;
	esac
    done
    shift $(( OPTIND - 1 ))

    MAKE+=" -j$NJOBS"

    if [ "$IMG" = "" ] ; then
	if [ -f "/var/lib/ktest/root" ]; then
	    IMG="/var/lib/ktest/root"
	elif [ -f "$HOME/.ktest/root" ]; then
	    IMG="$HOME/.ktest/root"
	else
	    echo "VM root filesystem not found, please create /var/lib/ktest/root or"
	    echo "$HOME/.ktest/root"
	    exit 1
	fi
    fi
    if [ ! -f $IMG ] ; then
	echo "VM root filesystem not found, use vm_create_image to create one"
	exit 1
    fi

    TEST=$1
    if [ -z "$TEST" ]; then
	echo "ktest: missing test"
	run_usage
	exit 1
    fi

    if [ ! -f "$TEST" ]; then
	echo "Test $TEST not found"
	exit 1
    fi

    WHICH=`which which`
    OLDPATH=$PATH
    PATH=.
    TEST=`$WHICH $TEST`
    PATH=$OLDPATH

    eval `$TEST deps`

    if [ -z "$MEM" ]; then
	echo "test must specify requirements"
	exit 1
    fi

    mkdir -p $DIR
    rm -f $DIR/rc
    ln -sf $TEST $DIR/rc
    FILES=$DIR/rc
    TESTDIR=`dirname $TEST`

    OLDIFS=$IFS
    IFS=','
    PATH+=":/sbin:/usr/sbin:/usr/local/sbin"

    for req in $REQUIRE; do
	if [ -f "$TESTDIR/$req" ]; then
	    FILES+=" $TESTDIR/$req"
	elif f="`which $req`"; then
	    FILES+=" $f"
	else
	    echo "Dependency $req not found"
	    exit 1
	fi
    done

    for req in $LREQUIRE; do
	if [ ! -f "$req" ]; then
	    echo "Dependency $f not found"
	    exit 1
	fi
	FILES+=" $req"
    done
    IFS=$OLDIFS

    if [ "$KERNEL" = "" ] ; then
	[ -f $DIR/.config ] || cp "$KTESTDIR/defconfig" "$DIR/.config"
	eval $MAKE || exit 1
	eval $MAKE modules_install
	KERNEL=$DIR/arch/x86/boot/bzImage
	KERNELDIR=$DIR
    else
	d=`dirname "$KERNEL"`
	d=`dirname "$d"`
	d=`dirname "$d"`
	KERNELDIR=`dirname "$d"`
	make -C $KERNELDIR INSTALL_MOD_PATH=modules modules_install
    fi

    # Remove symlinks, they'll break genisoimage which is following symlinks
    rm $KERNELDIR/modules/lib/modules/*/build
    rm $KERNELDIR/modules/lib/modules/*/source

    genisoimage -quiet -f -R -input-charset utf-8	\
	-o $DIR/run.iso 			\
	$KERNELDIR/modules/lib $FILES || exit 1
    rm -rf $KERNELDIR/modules

    if [ -n "$TIMEOUT" ]; then
	check_timeout "$TIMEOUT" &
	ALARM=$!
    fi

    $VMSTART start				\
	-i $IMG -t $TMPDIR			\
	-k "$KERNEL"     		        \
	-c $DIR/run.iso				\
	--id $DIR/id				\
	-m "$MEM"				\
	-s "$SCRATCH"				\
	|{
    sed -e '/TEST SUCCESS/q'
    [ -n "$ALARM" ] && kill $ALARM 2> /dev/null
    $VMSTART stop `cat $DIR/id`
    stty sane
    exit 0
}

stty sane
}

cmd_ssh()
{
    exec $VMSTART ssh `cat $DIR/id`
}

cmd_gdb()
{
    exec $VMSTART gdb `cat $DIR/id` $DIR/vmlinux
}

cmd_mon()
{
    exec $VMSTART mon `cat $DIR/id`
}

cmd_oldconfig()
{
    eval $MAKE oldconfig
}

cmd_config()
{
    eval $MAKE nconfig

}

usage()
{
    echo "ktest: Test kernels in virtual machines on a pool of remote servers"
    echo "Usage: ktest cmd [n]"
    echo "  run [-t timeut] [-i vmimage ] <testfile>	Compile and run a kernel and run <testfile>"
    echo "  ssh		Log in as root"
    echo "  gdb		Connect to kgdb"
    echo "  mon		Connect to qemu monitor"
    echo "  oldconfig	Run make oldconfig"
    echo "  config	Run make nconfig"
}

CMD="cmd_$1"
if [ -z "$1" -o "`type -t "$CMD"`" != "function" ]; then
    usage
    exit 1
fi
shift


if [ -d "$HOME/.ktest/tmp" ]; then
    TMPDIR=$HOME/.ktest/tmp
else
    TMPDIR=/tmp
fi

checkdep genisoimage
checkdep minicom
checkdep socat
checkdep gcc
checkdep make
checkdep qemu-system-x86_64 qemu-system-x86

eval $CMD $@
