#!/bin/bash

set -o nounset
set -o errexit
set -o errtrace
shopt -s lastpipe

# check for typical shell script errors

export PS4='+${LINENO}+ '

KTESTDIR=$(dirname "$(readlink -f "$0")")
VMSTART=$KTESTDIR/vm-start-new

. "$KTESTDIR/util.sh"
. "$KTESTDIR/parse-test.sh"

if which shellcheck > /dev/null 2>&1; then
    shellcheck --exclude=SC2030 --exclude=SC2031 "$0"
    shellcheck "$KTESTDIR/util.sh"
    shellcheck -exclude=SC2034 "$KTESTDIR/parse-test.sh"
fi

checkdep genisoimage
checkdep minicom
checkdep socat
checkdep qemu-system-x86_64 qemu-system-i386

PRIORITY=0		# hint for how long test should run
KERNEL=""		# dir that has the kernel to run
                        #       set with: -k <path>
IDFILE=""		# passed as --id to vmstart
                        #       set with: -w <path>
OUTPUT_DIR=""		# dir for test output (logs, code coverage, etc.)
SCRATCH_DIR="/tmp"      # dir where scratch drives are created
                        #       defaults: /tmp
                        #       auto-override: $HOME/.ktest/tmp
IMG="/var/lib/ktest/root"
                        # root image that will be booted
                        #       set with: -i <path>
                        #       defaults: /var/lib/ktest/root
                        #       auto-override: $HOME/.ktest/root
INTERACTIVE=0           # if set to 1, timeout is ignored completely
                        #       sets with: -I
EXIT_ON_SUCCESS=0	# if true, exit on success, not failure or timeout

# config files:
[[ -f $KTESTDIR/ktestrc ]]	&& . "$KTESTDIR/ktestrc"
[[ -f /etc/ktestrc ]]		&& . /etc/ktestrc

[[ -f $HOME/.ktestrc ]]		&& . "$HOME/.ktestrc"
[[ -f $HOME/.ktest/root ]]	&& IMG="$HOME/.ktest/root"
[[ -d $HOME/.ktest/tmp ]]	&& SCRATCH_DIR="$HOME/.ktest/tmp"

usage()
{
    echo "ktest: Run generic virtual machine tests"
    echo "Usage: ktest cmd [options]"
    echo "  boot        Boot a VM without running anything"
    echo "  run <test>  Run a kernel test"
    echo "  ssh         Login as root"
    echo "  gdb         Connect to qemu's gdb interface"
    echo "  kgdb        Connect to kgdb"
    echo "  mon         Connect to qemu monitor"
    echo "  sysrq <key> Send magic sysrq key via monitor"
    echo
    echo "  options:"
    echo "      -x       bash debug statements"
    echo "      -k <dir> kernel to use (default: kernel_source/.ktest)"
    echo "      -w <dir> work directory (default: .ktest"
    echo "      -o <dir> output directory (default: ktest-out)"
    echo
    echo " options for ktest run:"
    echo "      -i <dir> VM root filesystem image"
    echo "      -p <num> hint for test duration (higher is longer, default is 0)"
    echo "      -I       don't automatically stop VM"
    echo "      -S       exit only on test success"
    echo
    echo "For kgdb to be enabled, either -I or -S must be specified"
}

if [[ $# = 0 ]]; then
    usage
    exit 1
fi

#parse command and shift for rest of arg parsing
CMD="cmd_$1"
shift

while getopts "hp:i:k:ISw:o:x" arg; do
    case $arg in
	h)
	    usage
	    exit 0
	    ;;
	p)
	    PRIORITY=$OPTARG
	    ;;
	i)
	    IMG=$OPTARG
	    ;;
	k)
	    KERNEL=$OPTARG
	    ;;
	I)
	    INTERACTIVE=1
	    ;;
	S)
	    EXIT_ON_SUCCESS=1
	    ;;
	w)
	    IDFILE="$OPTARG"
	    ;;
	o)
	    OUTPUT_DIR="$OPTARG"
	    ;;
	x)
	    set -x
	    ;;
    esac
done
shift $(( OPTIND - 1 ))

if [[ -z $KERNEL ]]; then
    echo "Required parameter -k missing: kernel to boot"
    exit 1
fi

[[ -z $IDFILE ]]	&& IDFILE=./.ktest-vm
[[ -z $OUTPUT_DIR ]]	&& OUTPUT_DIR=./ktest-out

check_mlxcard()
{
    if ! $VMSTART check conx3; then
	echo "no free infiniband card present"
	exit 1
    fi
}

run_vm()
{
    if [[ ! -f $IMG ]]; then
	echo "VM root filesystem not found, use vm_create_image to create one"
	exit 1
    fi

    # setup directory where logfs will be mounted from
    mkdir -p "$OUTPUT_DIR"

    local KGDB=""

    if [[ $EXIT_ON_SUCCESS = 1 || $INTERACTIVE = 1 ]]; then
	KGDB="--kgdb"
    fi

    # kernel modules
    FILES+=("$KERNEL/lib")

    # kernel to kexec to for crash dumps
    FILES+=("vmlinuz=$KERNEL/vmlinuz")

    iso=$(mktemp --tmpdir ktest-XXXXXXXXXX.iso)
    trap 'rm -f $iso' SIGINT SIGTERM EXIT

    genisoimage -quiet -graft-points -input-charset utf-8 -R		\
	-o "$iso" "${FILES[@]}"

    set +o errexit

    # shellcheck disable=SC2086
    $VMSTART start							\
	--id "$IDFILE"							\
	--tmpfs-dir="$SCRATCH_DIR"					\
	--image="$IMG"							\
	--kernel="$KERNEL/vmlinuz"					\
	--cdrom="$iso"							\
	--fs "$OUTPUT_DIR" logfs					\
	--append="rw crashkernel=128M ktest.priority=$PRIORITY $_KERNEL_APPEND"\
	--memory="$_MEM"						\
	--cpus "$_CPUS"							\
	--nr_vms="$_NR_VMS"						\
	$KGDB $_SCRATCH|
    {
	if [[ $INTERACTIVE = 1 ]]; then
	    cat
	elif [[ $EXIT_ON_SUCCESS = 1 ]]; then
	    sed -u -e '/TEST SUCCESS/ { p; Q7 }'
	else
	    timeout "$_TIMEOUT" $KTESTDIR/catch_test_success.awk
	fi

	ret=$?
	kill %1
    }

    if [[ $ret = 124 ]]; then
	echo 'TEST TIMEOUT'
	exit 2
    fi

    # don't want sed exiting normally (saw neither TEST SUCCESS nor TEST FAILED)
    # to be consider success:
    [[ $ret = 7 ]]
}

cmd_boot()
{
    INTERACTIVE=1
    _KERNEL_APPEND=""
    _MEM=1G
    _CPUS=6
    _NR_VMS=1
    _SCRATCH=""

    FILES=("rc=$KTESTDIR/rc.interactive")

    run_vm
}

cmd_run()
{
    if [[ $# = 0 ]]; then
	echo "ktest: missing test"
	exit 1
    fi

    local TEST=$(readlink -e "$1")

    FILES=("rc=$KTESTDIR/rc.testwrapper")
    FILES+=("rc.interactive=$KTESTDIR/rc.interactive")
    FILES+=("rc.test=$TEST")

    parse_test_deps "$TEST"

    if [ -n "$_INFINIBAND" ]; then
	VMSTART="sudo $VMSTART"
	check_mlxcard
    fi

    run_vm "$TEST"
}

cmd_ssh()
{
    $VMSTART ssh "$(cat "$IDFILE")" "$@"
}

cmd_gdb()
{
    exec "$VMSTART" gdb "$(cat "$IDFILE")" "$KERNEL/vmlinux"
}

cmd_kgdb()
{
    exec "$VMSTART" kgdb "$(cat "$IDFILE")" "$KERNEL/vmlinux"
}

cmd_mon()
{
    exec "$VMSTART" mon "$(cat "$IDFILE")"
}

cmd_sysrq()
{
    exec "$VMSTART" sysrq "$(cat "$IDFILE")" "$@"
}

# checks if command is valid
if [[ $(type -t "$CMD") != function ]]; then
    usage
    exit 1
fi

$CMD "$@"
