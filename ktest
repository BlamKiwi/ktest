#!/bin/bash

set -o nounset
set -o errexit
set -o errtrace

# check for typical shell script errors

export PS4='+${LINENO}+ '

KTESTDIR=$(dirname "$(readlink -f "$0")")
VMSTART=$KTESTDIR/vm-start

. "$KTESTDIR/util.sh"
. "$KTESTDIR/parse-test.sh"

if which shellcheck > /dev/null 2>&1; then
    shellcheck "$0"
    shellcheck "$KTESTDIR/util.sh"
    shellcheck -exclude=SC2034 "$KTESTDIR/parse-test.sh"
fi

checkdep genisoimage
checkdep minicom
checkdep socat
checkdep qemu-system-x86_64 qemu-system-i386

PRIORITY=0		# hint for how long test should run
KERNEL=""		# dir that has the kernel to run
                        #       set with: -k <path>
WORK_DIR=""             # dir where vm meta data (id, logs, etc) gets stored
                        #       set with: -w <path>
OUTPUT_DIR=""		# dir name which is mounted at /var/log/datera in VM
SCRATCH_DIR="/tmp"      # dir where scratch drives are created
                        #       defaults: /tmp
                        #       auto-override: $HOME/.ktest/tmp
IMG="/var/lib/ktest/root"
                        # root image that will be booted
                        #       set with: -i <path>
                        #       defaults: /var/lib/ktest/root
                        #       auto-override: $HOME/.ktest/root
INTERACTIVE=0           # if set to 1, timeout is ignored completely
                        #       sets with: -I
EXIT_ON_SUCCESS=0	# if true, exit on success, not failure or timeout
CONTAINER_SRC_DIR=""	# dir which contains the datera containers

# config files:
[[ -f $KTESTDIR/ktestrc ]]	&& . "$KTESTDIR/ktestrc"
[[ -f /etc/ktestrc ]]		&& . /etc/ktestrc

[[ -f $HOME/.ktestrc ]]		&& . "$HOME/.ktestrc"
[[ -f $HOME/.ktest/root ]]	&& IMG="$HOME/.ktest/root"
[[ -d $HOME/.ktest/tmp ]]	&& SCRATCH_DIR="$HOME/.ktest/tmp"

usage()
{
    echo "ktest: Run generic virtual machine tests"
    echo "Usage: ktest cmd [options]"
    echo "  boot        Boot a VM without running anything"
    echo "  run <test>  Run a kernel test"
    echo "  ssh         Login as root"
    echo "  gdb         Connect to qemu's gdb interface"
    echo "  kgdb        Connect to kgdb"
    echo "  mon         Connect to qemu monitor"
    echo
    echo "  options:"
    echo "      -x       bash debug statements"
    echo "      -k <dir> kernel to use (default: kernel_source/.ktest)"
    echo "      -w <dir> work directory (default: .ktest"
    echo "      -o <dir> output directory (default: ktest-out)"
    echo
    echo " options for ktest run:"
    echo "      -i <dir> VM root filesystem image"
    echo "      -p <num> hint for test duration (higher is longer, default is 0)"
    echo "      -I       don't automatically stop VM"
    echo "      -S       exit only on test success"
    echo
    echo "For kgdb to be enabled, either -I or -S must be specified"
}

#prints usage if no args
if [[ $# -lt 1 ]]; then
    usage
    exit 1
fi

#parse command and shift for rest of arg parsing
CMD="cmd_$1"
shift

while getopts "hp:i:k:ISw:o:x" arg; do
    case $arg in
	h)
	    usage
	    exit 0
	    ;;
	p)
	    PRIORITY=$OPTARG
	    ;;
	i)
	    IMG=$OPTARG
	    ;;
	k)
	    KERNEL=$OPTARG
	    ;;
	I)
	    INTERACTIVE=1
	    ;;
	S)
	    EXIT_ON_SUCCESS=1
	    ;;
	w)
	    WORK_DIR="$OPTARG"
	    ;;
	o)
	    OUTPUT_DIR="$OPTARG"
	    ;;
	x)
	    set -x
	    ;;
    esac
done
shift $(( OPTIND - 1 ))

if [[ -z $KERNEL ]]; then
    echo "Required parameter -k missing: kernel to boot"
    exit 1
fi

[[ -z $WORK_DIR ]]	&& WORK_DIR=./.ktest
[[ -z $OUTPUT_DIR ]]	&& OUTPUT_DIR=./ktest-out

trap 'kill $(jobs -p) > /dev/null 2>&1 || true' SIGINT SIGTERM EXIT

check_mlxcard()
{
    if ! $VMSTART check conx3; then
	echo "no free infiniband card present"
	exit 1
    fi
}

build_file_list()
{
    FILES=()

    if [[ $# -eq 0 ]]; then
	install -m0755 "$KTESTDIR/rc.interactive" "$WORK_DIR/rc"
	FILES+=("$WORK_DIR/rc")
    else
	TEST=$1
	TEST=$(readlink -e "$TEST")

	install -m0755 "$KTESTDIR/rc.interactive" "$WORK_DIR/rc.interactive"
	FILES+=("$WORK_DIR/rc.interactive")

	install -m0755 "$KTESTDIR/rc.testwrapper" "$WORK_DIR/rc"
	FILES+=("$WORK_DIR/rc")

	install -m0644 "$TEST" "$WORK_DIR/rc.test"
	FILES+=("$WORK_DIR/rc.test")

	parse_test_deps "$TEST"

	if [ -n "$_INFINIBAND" ]; then
	    VMSTART="sudo $VMSTART"
	    check_mlxcard
	fi
    fi
}

prepare_vm()
{
    if [[ ! -f $IMG ]]; then
	echo "VM root filesystem not found, use vm_create_image to create one"
	exit 1
    fi

    # setup directory where logfs will be mounted from
    mkdir -p "$WORK_DIR"
    mkdir -p "$OUTPUT_DIR"

    build_file_list "$@"

    # shellcheck disable=SC2086
    genisoimage -quiet -R				\
	-input-charset utf-8				\
	-o "$WORK_DIR/run.iso"				\
	"$KERNEL/lib" "${FILES[@]}"
}

run_vmstart()
{
    local KGDB=""

    if [[ $EXIT_ON_SUCCESS = 1 || $INTERACTIVE = 1 ]]; then
	KGDB="--kgdb"
    fi

    # shellcheck disable=SC2086
    exec $VMSTART start							\
	--id "$WORK_DIR/id"						\
	--tmpfs-dir="$SCRATCH_DIR"					\
	--image="$IMG"							\
	--kernel="$KERNEL/vmlinuz"					\
	--cdrom="$WORK_DIR/run.iso"					\
	--fs "$OUTPUT_DIR" logfs					\
	--append="rw crashkernel=128M ktest.priority=$PRIORITY $_KERNEL_APPEND"\
	"$KGDB"								\
        "$@"
}

cmd_boot()
{
    prepare_vm

    _KERNEL_APPEND=""

    run_vmstart -m 1G --cpus 6
}

cmd_run()
{
    if [[ $# -lt 1 ]]; then
	echo "ktest: missing test"
	exit 1
    fi

    prepare_vm "$1"

    rm -f "$WORK_DIR/fifo.in"
    mkfifo "$WORK_DIR/fifo.in"

    rm -f "$WORK_DIR/fifo.out"
    FIFO="$WORK_DIR/fifo.out"
    mkfifo "$FIFO"

    # shellcheck disable=SC2086
    run_vmstart                                                 \
	--memory="$_MEM"					\
	--cpus "$_CPUS"						\
	--console "pipe,path=$WORK_DIR/fifo"			\
	$_SCRATCH						\
	$_INFINIBAND						\
	$_VMCLUSTER &

    set +o errexit

    if [[ $INTERACTIVE = 1 ]]; then
	cat "$FIFO"
    elif [[ $EXIT_ON_SUCCESS = 1 ]]; then
	sed -u -e '/TEST SUCCESS/ { p; Q7 }'			\
	       < "$FIFO"
    else
	timeout "$_TIMEOUT"					\
	    sed -u -e '/TEST SUCCESS/ { p; Q7 }'		\
		   -e '/TEST FAILED/  { p; Q0 }'		\
		   < "$FIFO"
    fi

    ret=$?

    [[ $ret = 124 ]] && echo 'TEST TIMEOUT'

    # don't want sed exiting normally (saw neither TEST SUCCESS nor TEST FAILED)
    # to be consider success:
    [[ $ret = 7 ]]
}

cmd_ssh()
{
    $VMSTART ssh "$(cat "$WORK_DIR/id")" "$@"
}

cmd_gdb()
{
    exec "$VMSTART" gdb "$(cat "$WORK_DIR/id")" "$KERNEL/vmlinux"
}

cmd_kgdb()
{
    exec "$VMSTART" kgdb "$(cat "$WORK_DIR/id")" "$KERNEL/vmlinux"
}

cmd_mon()
{
    exec "$VMSTART" mon "$(cat "$WORK_DIR/id")"
}

# checks if command is valid
if [[ $(type -t "$CMD") != function ]]; then
    usage
    exit 1
fi

$CMD "$@"
