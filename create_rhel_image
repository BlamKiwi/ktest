#!/bin/bash -e
#
# Create a VM image suitable for running automated tests
# Output: vm_image

KTESTDIR=$(dirname $(readlink -f $0))

. $KTESTDIR/util.sh

checkdep fallocate util-linux
checkdep mkfs.ext4 e2fsprogs
checkdep yum rpm

SIZE="2G"   # See man fallocate and resize2fs for meaning

PACKAGES="less psmisc openssh-server"
PACKAGES+=" make gcc g++ gdb strace"
PACKAGES+=" hdparm xfsprogs btrfs-tools mdadm lvm2 aoetools vblade"
PACKAGES+=" linux-tools blktrace sysstat fio dbench bonnie++"
PACKAGES+=" libunwind"

MIRROR="http://mirrors.daterainc.com/mirrors/"
REPOS="rhel-7-mirror rhel-7-debug epel-7-x86_64 rhel-7-ports"

usage()
{
    echo "create_vm_image: Create a virtual machine image for ktest"
    echo "Usage: create_vm_image [ -m mirror ] filename"
}

while getopts "hm:r:" arg; do
    case $arg in
	h)
	    echo "-m mirror server -r repos"
	    ;;
	m)
	    MIRROR="$OPTARG"
	    ;;
	r)
	    REPOS="$OPTARG"
	    ;;
    esac
done
shift $(( OPTIND - 1 ))

OUT=$1
if [ -z "$OUT" ]; then
    usage
    exit
fi

if [ `id -u` != 0 ] ; then
    echo this script must be run as root
    exit 1
fi

# Use the /tmp tmpfs for the build, its way faster
TDIR=$(mktemp -d)
trap 'echo "WARNING: left a mess in: $TDIR"' ERR
mount -n -t tmpfs none "$TDIR"

MNT="$TDIR/mount"
FSFILE="$TDIR/fs"



fallocate -l $SIZE $FSFILE
mkfs.ext4 -F $FSFILE
mkdir -p $MNT
mount -n -o loop $FSFILE $MNT


mkdir -p "${MNT}/dev/pts" "${MNT}/dev/shm"
ln -s /proc/self/fd/0 "${MNT}/dev/stdin"
ln -s /proc/self/fd/1 "${MNT}/dev/stdout"
ln -s /proc/self/fd/2 "${MNT}/dev/stderr"

mknod -m 666 "${MNT}/dev/null" c 1 3
mknod -m 666 "${MNT}/dev/zero" c 1 5
mknod -m 666 "${MNT}/dev/full" c 1 7
mknod -m 666 "${MNT}/dev/random" c 1 8
mknod -m 666 "${MNT}/dev/urandom" c 1 9
mknod -m 644 "${MNT}/dev/kmsg" c 1 11
mknod -m 666 "${MNT}/dev/tty" c 5 0
mknod -m 600 "${MNT}/dev/console" c 5 1
mknod -m 666 "${MNT}/dev/ptmx" c 5 2

mkdir -p "${MNT}/var/lib/rpm" "${MNT}/etc/yum.repos.d"
rpm --root "$MNT" --initdb

cat > $MNT/.yum.config <<-ZZ
[main]
cachedir=/var/cache/yum/$basearch/$releasever
keepcache=0
debuglevel=0
logfile=/var/log/yum.log
exactarch=1
obsoletes=1
gpgcheck=1
plugins=1
installonly_limit=3
reposdir=${CHROOTPATH}/etc/yum.repos.d
ZZ

for repo in $REPOS
do
repourl="${MIRROR}/$repo"
reponame=$( echo $repo | sed -e 's/[^a-zA-Z0-9\_\.\-]/_/g' )
cat >> $MNT/etc/yum.repos.d/install.repo <<-ZZ

[$reponame]
name=$reponame
baseurl=$repourl
enabled=1
gpgcheck=0
ZZ
done

# Trimmed down list of core packages
COREPKGS="basesystem bash biosdevname btrfs-progs coreutils"
COREPKGS+=" curl dhclient e2fsprogs filesystem glibc hostname"
COREPKGS+=" initscripts iproute iptables iputils kbd less man-db"
COREPKGS+=" ncurses openssh-clients openssh-server parted passwd"
COREPKGS+=" policycoreutils procps-ng rpm rsyslog setup shadow-utils"
COREPKGS+=" sudo systemd tar util-linux vim-minimal xfsprogs yum"
COREPKGS+=" NetworkManager"

yum -c "$MNT/.yum.config" \
    --installroot="$MNT" \
    --releasever="7Everything" \
    -y install $COREPKGS $PACKAGES

rm -rf "$MNT/var/cache/yum/*"

cat > "$MNT/etc/fstab" <<-ZZ
debugfs				/sys/kernel/debug	debugfs		defaults	0	0
configfgs			/sys/kernel/config	configfs	defaults	0	0
ZZ

cat > "$MNT/etc/systemd/system.conf" <<-ZZ
[Manager]
LogColor=no
LogTarget=console
LogLevel=info
ShowStatus=no
DefaultStandardOutput=journal+console
DefaultStandardError=journal+console
ZZ

cat > "$MNT/etc/rc.d/rc.local" <<-ZZ
#!/bin/bash -x

echo "Wait for network and devices to settle"
i=0
while [ \$i -lt 60 ]
do
    [ \$(nmcli networking connectivity) == "full" ] && break
    sleep 1
    i=\$(( \$i + 1 ))
done

mount /dev/sr0 /cdrom
PATH=/cdrom:\$PATH
cd /cdrom
exec ./rc
ZZ
chmod 755 "$MNT/etc/rc.d/rc.local"

mkdir -p "$MNT/cdrom"

ln -s /cdrom/modules "$MNT/lib/modules"

mkdir -p "$MNT/root/.ssh"
install -m0600 $KTESTDIR/id_dsa.pub "$MNT/root/.ssh/authorized_keys"

# Unmount everything in the root
i=0
while [ $i -lt 10 ]
do
    awk '{print $2}' /proc/mounts | grep ^"$MNT"/ | sort -r | {
	while read i_MNT
	do
	    umount -n "$i_MNT" &>/dev/null || :
	done
    }
    i=$(($i + 1))
done
umount $MNT
rmdir $MNT


# Trim deleted data from the image (around 75MB)
e2fsck -f $FSFILE
resize2fs -M $FSFILE      # shrinks the file
mv -f $FSFILE $OUT
resize2fs $OUT $SIZE      # re-grows as sparse

umount -n $TDIR || :
rmdir $TDIR && trap ERR   # No longer need the cleanup msg
