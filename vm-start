#!/usr/bin/python
# GPLv2

import os
import subprocess
import sys
import time
import argparse

DEFAULT_MEMORY = "1G"               # how much memory to give the vms

FNULL = open(os.devnull, 'rw')

def qemu_disk(dev, filename, opts="", device="scsi-hd"):
    return ["-drive", "if=none,format=raw,id=" + dev +
            ",file=" + filename + "," + opts,
            "-device", device + ",bus=scsi-hba.0,drive=" + dev]

def qemu_socket(vmdir, name):
    return "unix:" + os.path.join(vmdir, "vm-" + name) + ",server,nowait"

parser = argparse.ArgumentParser()
parser.add_argument("--architecture",
    default="x86_64",
    help="qemu architecture")
parser.add_argument("--scratchdir",
    help="use a prexisting scratch directory")
parser.add_argument("-k", "--kernel",
    help="kernel used to boot the virtual machine(s)")
parser.add_argument("-r", "--initrd",
    help="initial ramdisk for boot")
parser.add_argument("-a", "--append",
    action='append',
    help="append kernel command line boot arguments")
parser.add_argument("--kgdb", action="store_true",
    help="enable kgdb")
parser.add_argument("-i", "--image",
    action="append",
    default=[],
    help="list of disk images for the virtual machine(s)")
parser.add_argument("-s", "--scratchdev",
    action="append",
    default=[],
    help="list of scratch device sizes. ex: 256M,2G")
parser.add_argument("-m", "--memory",
    default=DEFAULT_MEMORY,
    help="amount of memory to be allocated per VM")
parser.add_argument("--cpus",
    default="1", type=int,
    help="number of CPUs allocated per VM")
parser.add_argument("--fs",
    action="append", nargs=2,
    help="mount a directory (first argument) as " +
    "a filesystem label (second argument) in the VM")

(args, extra_opts) = parser.parse_known_args()

if args.kernel and not os.path.isfile(args.kernel):
    raise RuntimeError("Cannot find kernel file: " + args.kernel)

if args.initrd and not os.path.isfile(args.initrd):
    raise RuntimeError("Cannot find initrd file: " + args.initrd)

vmdir = args.scratchdir

cmd = ["stdbuf", "-oL",
       "qemu-system-" + args.architecture,
       "-nodefaults",

       "-m",        args.memory,

       "-nographic",
       "-device",   "virtio-serial",
       "-chardev",  "stdio,id=console",
       "-device",   "virtconsole,chardev=console",

       "-serial",   qemu_socket(vmdir, "kgdb"),
       "-monitor",  qemu_socket(vmdir, "mon"),
       "-gdb",      qemu_socket(vmdir, "gdb"),
       "-device",   "virtio-rng-pci"
      ]

if args.architecture == "x86_64":
    cmd.extend(["-cpu",      "host",
                "-machine", "accel=kvm",
                "-smp",      "%d,sockets=%d" % (args.cpus, args.cpus)])

if args.kernel:
    cmd.extend(["-kernel", args.kernel])

if args.initrd:
    cmd.extend(["-initrd", args.initrd])

kernelParams = "console=hvc0 root=/dev/sda rw "
if args.kgdb:
    kernelParams += "kgdboc=ttyS0,115200 "

if args.append:
    kernelParams += " ".join(args.append)

cmd.extend(["-append", kernelParams])

# VirtIO-SCSI for root file system and scratch devices
cmd.extend(["-device", "virtio-scsi-pci,id=scsi-hba"])

# Root file system comes first (sda)

disknr = 0

for image in args.image:
    cmd.extend(qemu_disk("scsi" + str(disknr), image, "snapshot=on,cache=unsafe"))
    disknr += 1

for size in args.scratchdev:
    drive = os.path.join(vmdir, "disk-%u" % disknr)
    subprocess.check_call(["fallocate", "-l", size, drive])
    cmd.extend(qemu_disk("scsi" + str(disknr), drive, "cache=unsafe"))
    disknr += 1

for fspath, fslabel in args.fs:
    cmd.extend(["-virtfs", "local,path=" + fspath +
                ",mount_tag=" + fslabel +
                ",security_model=none"])

cmd.extend(["-net", "nic,model=virtio,macaddr=de:ad:be:ef:00:00",
            "-net", "vde,sock=" + os.path.join(vmdir, "net")])

subprocess.Popen(cmd,
                 stderr=subprocess.STDOUT,
                 stdin=subprocess.PIPE)

while True:
    os.wait()

try:
    sys.stdout.flush()
except:
    pass
