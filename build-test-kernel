#!/bin/bash

set -o nounset
set -o errexit
set -o errtrace

KTESTDIR=$(dirname "$(readlink -f "$0")")
KTEST=$KTESTDIR/ktest

. "$KTESTDIR/util.sh"
. "$KTESTDIR/parse-test.sh"

checkdep genisoimage
checkdep minicom
checkdep socat
checkdep gcc
checkdep make
checkdep qemu-system-x86_64 qemu-system-i386

KTESTARGS=""
PRIORITY=0		# hint for how long test should run
KERNEL_SOURCE="."	# dir of kernel source
			#       set with: -k <path>
			#       defaults: current directory
KERNEL_OUTPUT=""	# dir where the kernel will get built
			#       set with: -b <path>
			#       default: $KERNEL_SOURCE/$DEFAULT_DIR
WORK_DIR=""		# dir where vm meta data (id, logs, etc) gets stored
			#       set with: -w <path>
			#       defaults: $KERNEL_OUTPUT
BUILD=1			# if set to 1, kernel will build
			#       ignored with: -K (sets to 0)
DEPS=1
COVERAGE=""		# list of directories to enable code coverage for
NJOBS=$(($(grep -c '^processor' /proc/cpuinfo) * 2))
			# number of jobs to passed to make during kernel compile
			#       sets with: -j
			#       defaults to 2 * number of processor

# config files:
[[ -f $KTESTDIR/ktestrc ]]	&& . "$KTESTDIR/ktestrc"
[[ -f /etc/ktestrc ]]		&& . /etc/ktestrc
[[ -f $HOME/.ktestrc ]]		&& . "$HOME/.ktestrc"

usage()
{
    echo "build-test-kernel: Run generic virtual machine tests"
    echo "Usage: build-test-kernel cmd [options]"
    echo "  boot        Boot a VM without running anything"
    echo "  run <test>  Run a kernel test"
    echo "  ssh         Login as root"
    echo "  gdb         Connect to qemu's gdb interface"
    echo "  kgdb        Connect to kgdb"
    echo "  mon         Connect to qemu monitor"
    echo "  oldconfig   Run make oldconfig"
    echo "  config      Run make nconfig"
    echo
    echo "  options:"
    echo "      -x       bash debug statements"
    echo "      -k <dir> kernel source dir"
    echo "      -b <dir> build directory for kernel (default: kernel_source/.build-test-kernel)"
    echo "      -w <dir> work directory (default: kernel build directory)"
    echo "      -c <dir> enable coverage for this dir (only valid without -K)"
    echo
    echo " options for build-test-kernel run:"
    echo "      -K       don't build kernel"
    echo "      -j <num> j option to make"
    echo "      -i <dir> VM root filesystem image"
    echo "      -p <num> hint for test duration (higher is longer, default is 0)"
    echo "      -I       don't automatically stop VM"
    echo "      -S       exit only on test success"
    echo
    echo "For kgdb to be enabled, either -I or -S must be specified"
}

if [[ $# = 0 ]]; then
    usage
    exit 1
fi

#parse command and shift for rest of arg parsing
CMD="cmd_$1"
shift

while getopts "hp:k:KDc:i:b:j:ISw:x" arg; do
    case $arg in
	h)
	    usage
	    exit 0
	    ;;
	p)
	    PRIORITY=$OPTARG
	    KTESTARGS+=" -p $OPTARG"
	    ;;
	k)
	    KERNEL_SOURCE=$(readlink -e "$OPTARG")
	    ;;
	K)
	    BUILD=""
	    ;;
	D)
	    DEPS=""
	    ;;
	c)
	    if [ ! -d "$OPTARG" ]; then
		echo "$OPTARG must be a directory"
		exit 1
	    fi

	    checkdep lcov

	    # Strip trailing / from directory name, substitute _ for /
	    OPTARG=$(echo "${OPTARG%/}"|tr / _)
	    COVERAGE+=" GCOV_PROFILE_$OPTARG=y"
	    ;;
	i)
	    KTESTARGS+=" -i $OPTARG"
	    ;;
	b)
	    KERNEL_OUTPUT=$OPTARG
	    ;;
	j)
	    NJOBS=$OPTARG
	    ;;
	I)
	    KTESTARGS+=" -I"
	    ;;
	S)
	    KTESTARGS+=" -S"
	    ;;
	w)
	    WORK_DIR=$OPTARG
	    ;;
	x)
	    KTESTARGS+=" -x"
	    set -x
	    ;;
    esac
done
shift $(( OPTIND - 1 ))

# set default parameters:
[[ -z $WORK_DIR ]]	&& WORK_DIR=$KERNEL_SOURCE/.build_test_kernel
[[ -z $KERNEL_OUTPUT ]] && KERNEL_OUTPUT=$WORK_DIR/kpkg

mkdir -p "$WORK_DIR"
WORK_DIR=$(readlink -f "$WORK_DIR")

run_ktest()
{
    arg=$1
    shift

    # shellcheck disable=SC2086
    exec "$KTEST" "$arg" $KTESTARGS -k "$KERNEL_OUTPUT" "$@"
}

do_make()
{
    # shellcheck disable=SC2086
    make -C "$KERNEL_SOURCE" O="$WORK_DIR" -j "$NJOBS"			\
	$COVERAGE							\
	INSTALL_MOD_PATH="$KERNEL_OUTPUT"				\
	EXTRA_CFLAGS="-gdwarf-4 -g3 -fvar-tracking -fvar-tracking-assignments" "$@"
}

kernel_opt()
{
    local cmd=$1
    local opt=$2
    local kconfig="$WORK_DIR/.config"
    local config_tool="$KERNEL_SOURCE/scripts/config"

    if [[ $opt =~ = ]]; then
	local val=${opt: -1}
	opt="${opt%=?}"
    else
	local val=y
    fi

    case $cmd in
	set)
	    "$config_tool" --file "$kconfig" --set-val "$opt" "$val"
	    ;;
	check)
	    local c=$("$config_tool" --file "$kconfig" -s "$opt")

	    if [[ $c != $val ]]; then
		echo "Kernel config option $opt is $c; should be $val"
		exit 1
	    fi
	    ;;
    esac
}

build_kernel()
{
    rm -rf "$KERNEL_OUTPUT"
    mkdir -p "$KERNEL_OUTPUT"

    if [[ -n $DEPS ]]; then
	local kconfig="$WORK_DIR/.config"
	local config_tool="$KERNEL_SOURCE/scripts/config"

	[[ -f $kconfig ]] || install -m0644 "$KTESTDIR/defconfig" "$kconfig"

	local OLDIFS=$IFS
	IFS=','

	for opt in $_KERNEL_CONFIG_REQUIRE; do
	    [[ -n $opt ]] && kernel_opt set "$opt"
	done

	do_make olddefconfig

	for opt in $_KERNEL_CONFIG_REQUIRE; do
	    [[ -n $opt ]] && kernel_opt check "$opt"
	done

	IFS=$OLDIFS
    fi

    do_make

    install -m0644 "$WORK_DIR/vmlinux" "$KERNEL_OUTPUT/vmlinux"
    install -m0644 "$WORK_DIR/arch/x86/boot/bzImage" "$KERNEL_OUTPUT/vmlinuz"
    install -m0644 "$WORK_DIR/.config" "$KERNEL_OUTPUT/config"
    mkdir -p "$KERNEL_OUTPUT/lib"

    do_make modules_install

    # Remove symlinks, they'll break genisoimage which is following symlinks
    rm -f "$KERNEL_OUTPUT"/modules/lib/modules/*/build
    rm -f "$KERNEL_OUTPUT"/modules/lib/modules/*/source
}

cmd_boot()
{
    _KERNEL_CONFIG_REQUIRE=""

    [[ -n $BUILD ]] && build_kernel
    run_ktest boot
}

cmd_run()
{
    if [[ $# = 0 ]]; then
	echo "build-test-kernel: missing test"
	usage
	exit 1
    fi

    local TEST=$1

    parse_test_deps "$TEST"

    if [[ -n $COVERAGE ]]; then
	_KERNEL_CONFIG_REQUIRE+=",GCOV_KERNEL"
	_KERNEL_CONFIG_REQUIRE+=",GCOV_FORMAT_AUTODETECT"
    fi

    [[ -n $BUILD ]] && build_kernel

    run_ktest run "$TEST"
}

cmd_oldconfig()
{
    do_make oldconfig
}

cmd_config()
{
    do_make nconfig
}

cmd_ssh()
{
    run_ktest ssh "$@"
}

cmd_gdb()
{
    run_ktest gdb "$@"
}

cmd_kgdb()
{
    run_ktest kgdb "$@"
}

cmd_mon()
{
    run_ktest mon "$@"
}

cmd_help()
{
    usage
}

# checks if command is valid
if [[ $(type -t "$CMD") != function ]]; then
    usage
    exit 1
fi

$CMD "$@"
