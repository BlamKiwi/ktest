#!/bin/bash

require-lib bcachefs-test-libs.sh

require-kernel-config MD
require-kernel-config BLK_DEV_MD
require-kernel-config MD_FAULTY

config-scratch-devs 4G
config-scratch-devs 4G
config-scratch-devs 4G
config-scratch-devs 4G
config-scratch-devs 4G

config-timeout $(stress_timeout)

test_foo()
{
    run_quiet "" bcachefs format /dev/sdb /dev/sdc
    mount -t bcachefs -o ro /dev/sdb:/dev/sdc /mnt

    bcachefs fsck /dev/sdb /dev/sdc
}

test_recovery()
{
    run_quiet "" bcachefs format		\
	--discard				\
	--bucket=16k				\
	--block_size=4k				\
	/dev/sd[bcd]

    for i in `seq 0 20`; do
	mount -t bcachefs /dev/sdb:/dev/sdc:/dev/sdd /mnt

	#run_fio_randrw
	fio --eta=always			\
	    --exitall_on_error=1		\
	    --randrepeat=0			\
	    --ioengine=libaio			\
	    --iodepth=64			\
	    --iodepth_batch=16			\
	    --direct=1				\
	    --numjobs=1				\
	    --filename=/mnt/fiotest		\
	    --filesize=3500M			\
	    --name=randwrite			\
	    --rw=randwrite			\
	    --bsrange=4k-8k			\
	    --runtime=2

	$ktest_dir/tests/xfstests/src/godown -f /mnt

	umount /mnt
    done
}

disabled_test_assemble()
{
    run_quiet "" bcachefs format		\
	--errors=panic				\
	--discard				\
	/dev/sd[bcd]

    bcachefs assemble /dev/sd[bcd]

    mount -t bcachefs /dev/sdb /mnt
    umount /mnt
}

disabled_test_assemble_incremental()
{
    run_quiet "" bcachefs format		\
	--errors=panic				\
	/dev/sd[bcd]

    bcachefs incremental /dev/sdb
    bcachefs incremental /dev/sdc
    bcachefs incremental /dev/sdd

    mount -t bcachefs /dev/sdb /mnt
    umount /mnt
}

test_multimount()
{
    bcachefs format				\
	--errors=panic				\
	/dev/sdb

    mkdir -p /mnt/1 /mnt/2
    mount -t bcachefs /dev/sdb /mnt/1
    mount -t bcachefs /dev/sdb /mnt/2

    umount /mnt/1
    umount /mnt/2
}

test_twodevices()
{
    run_basic_fio_test				\
	/dev/sdb /dev/sdc /dev/sdd
}

test_replicas()
{
    run_basic_fio_test				\
	--replicas=2				\
	/dev/sd[bcd]
}

test_replicas_variable_buckets()
{
    run_basic_fio_test				\
	--replicas=2				\
	--bucket=32k	/dev/sdb		\
	--bucket=64k	/dev/sdc		\
	--bucket=128k	/dev/sdd
}

do_remove_test()
{
    offline=$1
    evacuate=$2

    run_quiet "" bcachefs format		\
	--errors=panic				\
	--replicas=2				\
	/dev/sd[bcd]

    mount -t bcachefs /dev/sdb:/dev/sdc:/dev/sdd /mnt

    local fioout="$ktest_tmp/fioout"
    run_fio_randrw >"$fioout" 2>&1 &
    local fiopid=$!

    sleep 1

    if [[ $offline = 1 ]]; then
	echo -n "offlining /dev/sdb... "
	bcachefs device offline --force	/dev/sdb
	echo "done"
    fi

    if [[ $evacuate = 1 ]]; then
	if [[ $offline = 0 ]]; then
	    bcachefs device set-state --force	/dev/sdb failed
	fi

	echo -n "evacuating /dev/sdb... "
	bcachefs device evacuate	/dev/sdb
	echo "done"
    fi

    echo -n "removing /dev/sdb... "
    if [[ $evacuate = 1 ]]; then
	bcachefs device remove		/dev/sdb
    else
	bcachefs device remove --force	/dev/sdb
    fi
    echo "done"

    if ! wait $fiopid; then
	cat "$fioout"
	return 1
    fi

    umount /mnt

    mount -t bcachefs /dev/sdc:/dev/sdd /mnt
    umount /mnt
}

test_device_remove_offline()
{
    do_remove_test 1 0
}

test_device_remove_online()
{
    do_remove_test 0 0
}

test_device_evacuate_offline()
{
    do_remove_test 1 1
}

test_device_evacuate_online()
{
    do_remove_test 0 1
}

test_device_add()
{
    setup_tracing 'bcachefs:*'

    run_quiet "" bcachefs format		\
	--errors=panic				\
	/dev/sdb

    mount /dev/sdb /mnt

    local fioout="$ktest_tmp/fioout"
    run_fio_randrw >"$fioout" 2>&1 &
    local fiopid=$!

    sleep 1

    echo -n "adding /dev/sdc... "
    bcachefs device add /mnt /dev/sdc
    echo "done"

    if ! wait $fiopid; then
	cat "$fioout"
	return 1
    fi

    umount /mnt
    mount -t bcachefs /dev/sdb:/dev/sdc /mnt
    umount /mnt
}

test_device_set_state()
{
    run_quiet "" bcachefs format		\
	--errors=panic				\
	--replicas=2				\
	/dev/sd[bcd]

    mount -t bcachefs /dev/sdb:/dev/sdc:/dev/sdd /mnt

    local fioout="$ktest_tmp/fioout"
    run_fio_randrw >"$fioout" 2>&1 &
    local fiopid=$!

    sleep 1

    for state in readonly failed spare; do
	bcachefs device set-state --force   /dev/sdc $state
	bcachefs device set-state	    /dev/sdc readwrite
    done

    if ! wait $fiopid; then
	cat "$fioout"
	return 1
    fi

    umount /mnt
}

test_device_readd()
{
    run_quiet "" bcachefs format		\
	--errors=panic				\
	--replicas=2				\
	/dev/sd[bc]

    mount -t bcachefs /dev/sdb:/dev/sdc /mnt

    local fioout="$ktest_tmp/fioout"
    run_fio_randrw >"$fioout" 2>&1 &
    local fiopid=$!

    sleep 1

    echo -n "offlining /dev/sdb... "
    bcachefs device offline --force	/dev/sdb
    echo "done"

    echo -n "onlining /dev/sdb... "
    bcachefs device online /dev/sdb
    echo "done"

    if ! wait $fiopid; then
	cat "$fioout"
	return 1
    fi

    umount /mnt

    mount -t bcachefs /dev/sdb:/dev/sdc /mnt
    umount /mnt
}

do_replicas_errors_test()
{
    error_type=$1

    #bcachefs_antagonist

    mdadm -B /dev/md0 -lfaulty -n1 /dev/sdc

    run_quiet "" bcachefs format		\
	--errors=panic				\
	--replicas=2				\
	/dev/md0 /dev/sdb

    mount -t bcachefs -o degraded /dev/sdb:/dev/md0 /mnt

    mdadm -G /dev/md0 -p$error_type

    run_fio_randrw
    umount /mnt
    mdadm --stop /dev/md0
}

test_replicas_write_errors()
{
    do_replicas_errors_test write-all
}

test_replicas_read_errors()
{
    do_replicas_errors_test read-persistent1
}

test_cmd_fs_usage()
{
    run_quiet "" bcachefs format		\
	--errors=panic				\
	--replicas=2				\
	--bucket=128k				\
	/dev/sd[bcd]

    echo -n "mounting... "
    mount -t bcachefs /dev/sdb:/dev/sdc:/dev/sdd /mnt
    echo done

    echo "Before writing:"
    bcachefs fs usage  /mnt
    echo
    df -h /mnt
    echo

    run_fio_randrw --size=500M > /dev/null

    echo
    echo "After writing:"
    bcachefs fs usage -h /mnt
    echo
    df -h /mnt

    umount /mnt
}

test_rereplicate()
{
    run_quiet "" bcachefs format		\
	--errors=panic				\
	/dev/sd[bcd]
    mount -t bcachefs /dev/sdb:/dev/sdc:/dev/sdd /mnt

    dd if=/dev/zero of=/mnt/test bs=1M count=1024 oflag=direct

    umount /mnt
    mount -t bcachefs -o metadata_replicas=2,data_replicas=2 /dev/sdb:/dev/sdc:/dev/sdd /mnt

    #echo 2 > /sys/fs/bcachefs/*/options/data_replicas
    #echo 2 > /sys/fs/bcachefs/*/options/metadata_replicas

    bcachefs data rereplicate /mnt

    bcachefs fs usage -h /mnt
    umount /mnt

    mount -t bcachefs -o degraded /dev/sdb:/dev/sdc /mnt
    umount /mnt
}

disabled_test_device_add_faults()
{
    setup_tracing 'bcachefs:*'

    run_quiet "" bcachefs format		\
	--errors=remount-ro			\
	/dev/sdb
    mount /dev/sdb /mnt

    device_add_fault_fn()
    {
	set_faults "$1 enable"
	! bcachefs device add /mnt /dev/sdc
    }

    run_fault_injection_test bcachefs:add			device_add_fault_fn
    run_fault_injection_test bcachefs:bch_fs_init:dev_alloc	device_add_fault_fn
    run_fault_injection_test bcachefs:bch_fs_init:alloc_start	device_add_fault_fn
    run_fault_injection_test bcachefs:bch_fs_init:read_super	device_add_fault_fn
}

test_striping()
{
    setup_tracing 'bcachefs:*'

    if false; then
	run_quiet "" bcachefs format		\
	    --errors=panic			\
	    --replicas=2			\
	    /dev/sd[bc]

	mount -t bcachefs /dev/sdb:/dev/sdc /mnt

	dd if=/dev/zero of=/mnt/test0 bs=1M count=1024 oflag=direct
	bcachefs fs usage -h /mnt

	bcachefs device add /mnt /dev/sdd

	dd if=/dev/zero of=/mnt/test1 bs=1M count=1024 oflag=direct
    else
	run_quiet "" bcachefs format		\
	    --errors=panic			\
	    --data_checksum=none		\
	    --replicas=2			\
	    --group cache			\
	    --durability=1			\
	    --bucket=8M /dev/sd[b]		\
	    --group hdd				\
	    --durability=2			\
	    --bucket=8M /dev/sd[cd]		\
	    --foreground_target=cache		\
	    --background_target=hdd		\
	    --promote_target=cache

	mount -t bcachefs /dev/sdb:/dev/sdc:/dev/sdd /mnt

	dd if=/dev/zero of=/mnt/test0 bs=1M count=1024 oflag=direct
    fi

    bcachefs fs usage -h /mnt

    umount /mnt
}

disabled_change_replicas()
{
    run_quiet "" bcachefs format		\
	--errors=panic				\
	--replicas=2				\
	/dev/sd[bc]

    mount -t bcachefs /dev/sdb:/dev/sdc /mnt

    (
	cd /sys/fs/bcachefs/*
	while true; do
	    echo 1 > options/data_replicas
	    sleep 0.1
	    echo 2 > options/data_replicas
	    sleep 0.1
	done
    ) &

    run_fio_randrw

    while true; do
	dd if=/dev/zero of=/mnt/foo bs=1M count=1024 oflag=direct
	sync
	#rm /mnt/foo
    done

    kill %1
    umount /mnt
}

disabled_change_replicas2()
{
    run_quiet "" bcachefs format		\
	--errors=panic				\
	--replicas=2				\
	/dev/sd[bc]

    mount -t bcachefs /dev/sdb:/dev/sdc /mnt

    local opt=/sys/fs/bcachefs/*/options/data_replicas
    while true; do
	echo 1 > $opt
	dd if=/dev/zero of=/mnt/foo bs=1M count=1024
	echo 2 > $opt
	sync
	#rm /mnt/foo
    done

    umount /mnt
}

test_ec()
{
    #echo 1 > /sys/module/bcachefs/parameters/force_reconstruct_read
    #echo 1 > /sys/module/bcachefs/parameters/debug_check_bkeys

    run_quiet "" bcachefs format -f		\
	--errors=panic				\
	--erasure_code				\
	--replicas=2				\
	/dev/sd[bcdef]
    devs=/dev/sdb:/dev/sdc:/dev/sdd:/dev/sde:/dev/sdf

    mount -t bcachefs $devs /mnt

    #enable_memory_faults
    run_fio_randrw
    #disable_memory_faults

    #bcachefs fs usage -h /mnt
    umount /mnt

    # test remount:
    echo "Testing remount"
    mount -t bcachefs -o fsck $devs /mnt
    umount /mnt

    #bcachefs fsck /dev/sd[bcdef]
}

test_ec_lz4()
{
    #echo 1 > /sys/module/bcachefs/parameters/force_reconstruct_read
    #echo 1 > /sys/module/bcachefs/parameters/debug_check_bkeys

    run_quiet "" bcachefs format -f		\
	--errors=panic				\
	--erasure_code				\
	--compression=lz4			\
	--replicas=2				\
	/dev/sd[bcdef]
    devs=/dev/sdb:/dev/sdc:/dev/sdd:/dev/sde:/dev/sdf

    mount -t bcachefs $devs /mnt

    #enable_memory_faults
    run_fio_randrw
    #dd if=/dev/zero of=/mnt/foo bs=1M count=10 oflag=direct
    #disable_memory_faults

    #bcachefs fs usage -h /mnt
    umount /mnt

    # test remount:
    echo "Testing remount"
    mount -t bcachefs -o fsck $devs /mnt
    umount /mnt

    #bcachefs fsck /dev/sd[bcdef]
}

test_ec_gc()
{
    #echo 1 > /sys/module/bcachefs/parameters/force_reconstruct_read
    #echo 1 > /sys/module/bcachefs/parameters/debug_check_bkeys

    run_quiet "" bcachefs format -f		\
	--errors=continue			\
	--replicas=2				\
	/dev/sd[bcdef]
    devs=/dev/sdb:/dev/sdc:/dev/sdd:/dev/sde:/dev/sdf

    mount -t bcachefs -o erasure_code $devs /mnt

    antagonist_trigger_gc &
    run_fio_randrw

    dd if=/dev/zero of=/mnt/foo bs=1M count=16 oflag=direct

    echo 1 > /sys/fs/bcachefs/*/internal/trigger_gc
    echo unmounting

    #bcachefs fs usage -h /mnt
    umount /mnt

    # test remount:
    mount -t bcachefs -o fix_errors,erasure_code $devs /mnt
    umount /mnt

    #bcachefs fsck /dev/sd[bcdef]
}

test_replicas_gc()
{
    echo 1 > /sys/module/bcachefs/parameters/force_reconstruct_read
    #echo 1 > /sys/module/bcachefs/parameters/debug_check_bkeys

    run_quiet "" bcachefs format -f		\
	--errors=panic				\
	--replicas=2				\
	/dev/sd[bcdef]
    devs=/dev/sdb:/dev/sdc:/dev/sdd:/dev/sde:/dev/sdf

    mount -t bcachefs $devs /mnt

    antagonist_trigger_gc &
    run_fio_randrw

    echo 1 > /sys/fs/bcachefs/*/internal/trigger_gc
    umount /mnt

    # test remount:
    mount -t bcachefs -o fix_errors,erasure_code $devs /mnt
    umount /mnt

    bcachefs fsck /dev/sd[bcdef]
}
