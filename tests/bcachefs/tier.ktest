#!/bin/bash

require-lib bcachefs-test-libs.sh

config-scratch-devs 1G
config-scratch-devs 1G
config-scratch-devs 4G
config-scratch-devs 4G

config-timeout $(stress_timeout)

run_basic_tiering_test()
{
    run_basic_fio_test "$@"			\
	--block_size=4k				\
	--group=ssd.ssd1 /dev/sdb		\
	--group=ssd.ssd2 /dev/sdc		\
	--group=hdd.hdd1 /dev/sdd		\
	--group=hdd.hdd2 /dev/sde		\
	--foreground_target=ssd			\
	--promote_target=ssd			\
	--background_target=hdd
}

test_tiering()
{
    run_basic_tiering_test
}

test_tiering_buffered()
{
    run_quiet "" bcachefs format		\
	--block_size=4k				\
	--group=ssd.ssd1 /dev/sdb		\
	--group=ssd.ssd2 /dev/sdc		\
	--group=hdd.hdd1 /dev/sdd		\
	--group=hdd.hdd2 /dev/sde		\
	--foreground_target=ssd			\
	--promote_target=ssd			\
	--background_target=hdd

    mount -t bcachefs /dev/sdb:/dev/sdc:/dev/sdd:/dev/sde /mnt

    local loops=$((($ktest_priority + 1) * 4))

    fio --eta=always				\
	--exitall_on_error=1			\
	--ioengine=sync				\
	--numjobs=1				\
	--verify=crc32c				\
	--verify_fatal=1			\
	--buffer_compress_percentage=30		\
	--filename=/mnt/fiotest		    	\
	--filesize=3500M			\
	--loops=$loops				\
	--name=randrw				\
	--rw=randrw				\
	--bsrange=512-16k
    umount /mnt
}

test_writethrough()
{
    run_basic_fio_test "$@"			\
	--durability=0 --group=ssd /dev/sd[bc]	\
	--durability=1 --group=hdd /dev/sd[de]	\
	--foreground_target=ssd			\
	--promote_target=ssd			\
	--background_target=hdd
}

test_promote()
{
    setup_tracing 'bcachefs:*'

    run_quiet "" bcachefs format		\
	--durability=0 --group=ssd /dev/sdb	\
	--durability=1 --group=hdd /dev/sdd	\
	--foreground_target=hdd			\
	--promote_target=ssd			\
	--background_target=hdd

    mount -t bcachefs /dev/sdb:/dev/sdd /mnt

    dd if=/dev/zero of=/mnt/foo bs=1M count=1024 oflag=direct

    dd if=/mnt/foo of=/dev=null bs=1M count=1 iflag=direct

    bcachefs fs usage -h /mnt
    # should be some data on cache devices

    umount /mnt
}

test_tiering_no_checksum()
{
    run_basic_tiering_test --data_checksum=none
}

test_tiering_compression()
{
    run_basic_tiering_test --compression=lz4
}

test_tiering_crypto()
{
    run_basic_tiering_test --encrypted --no_passphrase	
}

test_tiering_crypto_lz4()
{
    run_basic_tiering_test --encrypted --no_passphrase --compression=lz4
}

test_tiering_replication()
{
    run_basic_tiering_test --replicas=2
}

test_tiering_variable_buckets()
{
    run_basic_fio_test					\
	--group=ssd --bucket=32k	/dev/sdb	\
	--group=ssd --bucket=64k	/dev/sdc	\
	--group=hdd --bucket=128k	/dev/sde	\
	--group=hdd --bucket=256k	/dev/sdd	\
	--foreground_target=ssd				\
	--promote_target=ssd				\
	--background_target=hdd
}

test_tiering_variable_buckets_replicas()
{
    run_basic_fio_test					\
	--replicas=2					\
	--group=ssd --bucket=32k	/dev/sdb	\
	--group=ssd --bucket=64k	/dev/sdc	\
	--group=hdd --bucket=128k	/dev/sde	\
	--group=hdd --bucket=256k	/dev/sdd	\
	--foreground_target=ssd				\
	--promote_target=ssd				\
	--background_target=hdd
}

test_device_add()
{
    run_quiet "" bcachefs format			\
	--errors=panic				\
	--group=hdd /dev/sd[de]

    mount -t bcachefs /dev/sdd:/dev/sde /mnt

    run_fio_randrw|tail -n200 &
    bcachefs device add /mnt /dev/sdc

    wait
    umount /mnt
}

test_mount_umount_torture()
{
    run_quiet "" bcachefs format			\
	--replicas=2					\
	--group=ssd /dev/sd[bc]				\
	--group=hdd /dev/sd[de]				\
	--foreground_target=ssd				\
	--promote_target=ssd				\
	--background_target=hdd

    for i in {0..10}; do
	mount -t bcachefs /dev/sdb:/dev/sdc:/dev/sdd:/dev/sde /mnt
	umount /mnt
    done
}

test_dm_log_writes()
{
    exit 1
}

disabled_test_change_replicas()
{
    run_quiet "" bcachefs format			\
	--errors=panic				\
	--group=ssd /dev/sd[bc]				\
	--group=hdd /dev/sd[de]				\
	--foreground_target=ssd				\
	--promote_target=ssd				\
	--background_target=hdd

    mount -t bcachefs /dev/sdb:/dev/sdc:/dev/sdd:/dev/sde /mnt

    (
	cd /sys/fs/bcachefs/*
	while true; do
	    echo 1 > options/data_replicas
	    sleep 0.1
	    echo 2 > options/data_replicas
	    sleep 0.1
	done
    ) &

    loops=$((($ktest_priority + 1) * 4))

    fio --eta=always				\
	--numjobs=1				\
	--buffer_compress_percentage=50		\
	--filename=/mnt/fiotest		    	\
	--filesize=1500M			\
	--loops=$loops				\
	--name=randrw				\
	--rw=randrw				\
	--bsrange=4k-1M	

#    while true; do
#	dd if=/dev/zero of=/mnt/foo bs=1M count=1024 oflag=direct
#	sync
#	#rm /mnt/foo
#    done

    kill %1
    umount /mnt
}
