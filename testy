#!/bin/bash
#
# testy - given a list of files to test, run tests that apply to those files (or
# optionally just print them out)

set -o nounset
set -o errexit
set -o pipefail
export PS4='+`basename ${BASH_SOURCE[0]}`:${LINENO}:${FUNCNAME[0]:+${FUNCNAME[0]}()}+ '

KTESTDIR=$(dirname "$(readlink -f "$0")")

# hack:
ACTEST="/src/appliance-clustest/actest -i /usr/share/DateraAppliance/DaterOS-sda.raw"

DRYRUN=0
PRIORITY=0
KTESTARGS=""
WORKDIR=""
KEEP_GOING=0

read_tests()
{
    # For every pattern/test in the test list, if $file matches the pattern
    # print out the corresponding test:

    local file=$1
    local dir=$2
    local testlist="$dir/tests.testy"

    [ -e "$testlist" ] || return 0

    sed -e 's/#.*//' "$testlist"				\
	|while read line; do
	    [ -z "$line" ] && continue

            # shellcheck disable=SC2086
	    set $line
	    priority=$1
	    shift
	    pattern=$dir/$1
	    shift

	    ((priority > PRIORITY)) && continue

	    # strip off a trailing / or /. from $pattern
	    pattern=${pattern%/}
	    pattern=${pattern%/.}

	    for i in $pattern; do
		if [ "$file" = "$i" -o				\
		     "${i##$file/}" != "$i" -o			\
		     "${file##$i/}" != "$file" ]; then
		    if ! readlink -e "$dir/$1" ; then
			echo "test $dir/$1 not found" >&2
			exit 1
		    fi
		    break
		fi
	    done
	done
}

get_tests()
{
    # Given a list of files to test, find test lists in the same directory as
    # the file to test or any parent directory

    for i in "$@" ; do
	[ -e "$i" ] || continue

        local file=$(readlink -fn "$i")
	local dir="$file"

	(find "$dir" -name tests.testy 2>/dev/null || true)	\
	    |while read testlist; do
		read_tests "$file" "$(dirname "$testlist")"
	    done

	while [ "$dir" != "/" ]; do
	    dir=$(dirname "$dir")
	    read_tests "$file" "$dir"
	done
    done
}

run_test()
{
    local testfile=$1

    # hack
    [ -n "$WORKDIR" ] && sudo rm -rf $WORKDIR

    case "$testfile" in
	*.ktest)
	    "$KTESTDIR/ktest" run $KTESTARGS "$testfile"
	    ;;
	*.actest)
	    $ACTEST -w "$WORKDIR" "$testfile"
	    ;;
	*)
	    "$testfile"
	    ;;
    esac
}

usage()
{
    echo "testy: find and run tests for a list of files to test"
    echo "Usage: testy [options] <files>.."
    echo "  -n	    don't run tests, just print them out"
}

while getopts "hnfp:k:Ki:b:j:w:x" arg; do
    case $arg in
	h)
	    usage
	    exit 1
	    ;;
	n)
	    DRYRUN=1
	    ;;
	f)
	    KEEP_GOING=1
	    ;;
	p)
	    PRIORITY=$OPTARG
	    KTESTARGS+=" -p $OPTARG"
	    ;;
	k)
	    KTESTARGS+=" -k $OPTARG"
	    ;;
	K)
	    KTESTARGS+=" -K"
	    ;;
	i)
	    KTESTARGS+=" -i $OPTARG"
	    ;;
	b)
	    KTESTARGS+=" -b $OPTARG"
	    ;;
	j)
	    KTESTARGS+=" -j $OPTARG"
	    ;;
	w)
	    WORKDIR=$OPTARG
	    KTESTARGS+=" -w $OPTARG"
	    ;;
	x)
	    set -x
	    KTESTARGS+=" -x"
	    ;;
    esac
done
shift $((OPTIND - 1))

tests_failed=$(mktemp)
tests_to_run=$(mktemp)

# If get_tests fail we want the whole script to fail, so we can't call
# it from $(...) -- redirect output to a file then read the file later
# instead.
get_tests "$@" > "$tests_to_run"

if [ "$DRYRUN" == 0 ]; then
    # shellcheck disable=SC2013
    for testfile in $(sort -u "$tests_to_run"); do
        testname=$(basename "$testfile")
	starttime=$(date +%s)
	failed=0

	run_test "$testfile" > "/tmp/$testname.log" 2>&1 || failed=1

	duration=$(($(date +%s) - starttime))

	if [ $failed = 1 ]; then
	    # Note that we're on the right hand side of |, so we can't just
	    # set a variable and test it at the end of the loop...
	    echo "$testname" >> "$tests_failed"
	    sed "s/^/[$testname] /" "/tmp/$testname.log"
	    echo "[$testname] FAILURE: test finished at $(date +%s) -- $(date) after $duration seconds"
	    [ $KEEP_GOING = 0 ] && break
	else
	    echo "[$testname] SUCCESS: test finished at $(date +%s) -- $(date) after $duration seconds"
	fi
    done
else
    sort -u "$tests_to_run"
fi

rm "$tests_to_run"

# Exit with failure if some tests failed
test -z "$(cat "$tests_failed")"
