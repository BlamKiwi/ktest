#!/bin/bash
#
# testy - given a list of files to test, run tests that apply to those files (or
# optionally just print them out)

set -o nounset
set -o errexit
set -o pipefail

KTESTDIR=$(dirname $(readlink -f "$0"))

# hack:
ACTEST="/src/appliance-clustest/actest -w workdir.$$ -i /usr/share/DateraAppliance/DaterOS-sda.raw -x"

DRYRUN=0
PRIORITY=0
KTESTARGS=""

read_tests()
{
    # For every pattern/test in the test list, if $file matches the pattern
    # print out the corresponding test:

    local file=$1
    local testlist=$2
    local dir=`dirname $testlist`

    sed -e 's/#.*//' "$testlist"				\
	|while read line; do
	    [ -z "$line" ] && continue

	    set $line
	    priority=$1
	    shift
	    pattern=$1
	    shift

	    (($priority > $PRIORITY)) && continue

	    for i in `echo $dir/$pattern|sed -e 's_/\.$__'`; do
		if [ "$file" = "$i" -o				\
		     "${i##$file/}" != "$i" -o			\
		     "${file##$i/}" != "$file" ]; then
		    readlink -f $dir/$@
		    break
		fi
	    done
	done
}

get_tests()
{
    # Given a list of files to test, find test lists in the same directory as
    # the file to test or any parent directory

    for i in $@; do
	local file=`readlink -fn "$i"`
	local dir=$file

	(find "$file" -name tests.testy 2>/dev/null || true)|		\
	    while read testlist; do
		read_tests "$file" "$testlist"
	    done

	while true; do
	    dir=$(dirname "$dir")
	    testlist="$dir/tests.testy"

	    if [ -f "$testlist" ]; then
		read_tests "$file" "$testlist"
	    fi

	    if [ "$dir" = "/" -o "$dir" = "." ]; then
		break
	    fi
	done
    done
}

run_test()
{
    local testfile=$1

    case "$testfile" in
	*.ktest)
	    $KTESTDIR/ktest run $KTESTARGS "$testfile"
	    ;;
	*.actest)
	    $ACTEST "$testfile"
	    ;;
	*)
	    "$testfile"
	    ;;
    esac
}

usage()
{
    echo "testy: find and run tests for a list of files to test"
    echo "Usage: testy [options] <files>.."
    echo "  -n	    don't run tests, just print them out"
}

while getopts "hnp:k:Ki:b:j:w:x" arg; do
    case $arg in
	h)
	    usage
	    exit 1
	    ;;
	n)
	    DRYRUN=1
	    ;;
	p)
	    PRIORITY=$OPTARG
	    ;;
	k)
	    KTESTARGS+=" -k $OPTARG"
	    ;;
	K)
	    KTESTARGS+=" -K"
	    ;;
	i)
	    KTESTARGS+=" -i $OPTARG"
	    ;;
	b)
	    KTESTARGS+=" -b $OPTARG"
	    ;;
	j)
	    KTESTARGS+=" -j $OPTARG"
	    ;;
	w)
	    KTESTARGS+=" -w $OPTARG"
	    ;;
	x)
	    set -x
	    ;;
    esac
done
shift $((OPTIND - 1))

get_tests $@|sort|uniq						\
    |while read testfile; do
	if [ "$DRYRUN" == 0 ]; then
	    testname=`basename "$testfile"`
	    starttime=`date +%s`

	    ret=1

	    run_test "$testfile" > /tmp/$testname.log 2>&1 && ret=0

	    duration=$((`date +%s` -  $starttime))


	    if [ "$ret" = 1 ]; then
                sed "s/^/[$testname] /" /tmp/$testname.log
                echo [$testname] FAILURE: test finished at `date +%s` -- `date` after $duration seconds
		exit $ret
            else
                echo [$testname] SUCCESS: test finished at `date +%s` -- `date` after $duration seconds
	    fi
	else
	    echo "$testfile"
	fi
    done
