#!/bin/bash
#
# testy - given a list of files to test, run tests that apply to those files (or
# optionally just print them out)

set -o nounset
set -o errexit
set -o pipefail
export PS4='+`basename ${BASH_SOURCE[0]}`:${LINENO}:${FUNCNAME[0]:+${FUNCNAME[0]}()}+ '

KTESTDIR=$(dirname "$(readlink -f "$0")")

# hack:
ACTEST="/src/appliance-clustest/actest -i /usr/share/DateraAppliance/DaterOS-sda.raw"

DRYRUN=0
PRIORITY=0
WORKDIR=""
LOGDIR=""
KTESTARGS=""

# hack
( cd "$KTESTDIR/kmo-batch" && make kmo-batch )

read_tests()
{
    # For every pattern/test in the test list, if $file matches the pattern
    # print out the corresponding test:

    local file=$1
    local dir=$2
    local testlist="$dir/tests.testy"

    [ -e "$testlist" ] || return 0

    sed -e 's/#.*//' "$testlist"				\
	|while read line; do
	    [ -z "$line" ] && continue

            # shellcheck disable=SC2086
	    set $line

            if [ "$#" != 3 ]; then
                echo "Malformed line in ${testlist}:" >&2
                echo "Expect <priority> <pattern> <test>" >&2
                echo "Got $line" >&2
                exit 1
            fi

	    priority=$1
	    shift
	    pattern=$dir/$1
	    shift

	    ((priority > PRIORITY)) && continue

	    # strip off a trailing / or /. from $pattern
	    pattern=${pattern%/}
	    pattern=${pattern%/.}

	    for i in $pattern; do
		if [ "$file" = "$i" -o				\
		     "${i##$file/}" != "$i" -o			\
		     "${file##$i/}" != "$file" ]; then
		    if ! readlink -e "$dir/$1" ; then
			echo "test $dir/$1 not found" >&2
			exit 1
		    fi
		    break
		fi
	    done
	done
}

get_tests()
{
    # Given a list of files to test, find test lists in the same directory as
    # the file to test or any parent directory

    for i in "$@" ; do
	[ -e "$i" ] || continue

        local file=$(readlink -fn "$i")
	local dir="$file"

	(find "$dir" -name tests.testy 2>/dev/null || true)	\
	    |while read testlist; do
		read_tests "$file" "$(dirname "$testlist")"
	    done

	while [ "$dir" != "/" ]; do
	    dir=$(dirname "$dir")
	    read_tests "$file" "$dir"
	done
    done
}

run_test()
{
    local testfile=$1

    # hack
    [ -n "$WORKDIR" ] && sudo rm -rf $WORKDIR

    case "$testfile" in
	*.ktest)
	    "$KTESTDIR/testy.run-test" "$KTESTDIR/ktest" run $KTESTARGS "$testfile"
	    ;;
	*.actest)
	    "$KTESTDIR/testy.run-test" "$ACTEST" -w "$WORKDIR" "$testfile"
	    ;;
	*)
	    "$KTESTDIR/testy.run-test" "$testfile"
	    ;;
    esac
}

usage()
{
    echo "testy: find and run tests for a list of files to test"
    echo "Usage: testy [options] <files>.."
    echo "  -n	    don't run tests, just print them out"
}

while getopts "hnfp:k:Ki:b:j:w:o:x" arg; do
    case $arg in
	h)
	    usage
	    exit 1
	    ;;
	n)
	    DRYRUN=1
	    ;;
	f)
	    ;;
	p)
	    PRIORITY=$OPTARG
	    KTESTARGS+=" -p $OPTARG"
	    ;;
	k)
	    KTESTARGS+=" -k $OPTARG"
	    ;;
	K)
	    KTESTARGS+=" -K"
	    ;;
	i)
	    KTESTARGS+=" -i $OPTARG"
	    ;;
	b)
	    KTESTARGS+=" -b $OPTARG"
	    ;;
	j)
	    KTESTARGS+=" -j $OPTARG"
	    ;;
	w)
	    WORKDIR=$OPTARG
	    KTESTARGS+=" -w $OPTARG"
	    ;;
	o)
	    LOGDIR=$OPTARG
	    KTESTARGS+=" -o $OPTARG"
	    ;;
	x)
	    set -x
	    KTESTARGS+=" -x"
	    ;;
    esac
done
shift $((OPTIND - 1))

ret=0
tmpfile=$(mktemp)

# If get_tests fail we want the whole script to fail, so we can't call
# it from $(...) -- redirect output to a file then read the file later
# instead.
get_tests "$@" > "$tmpfile"
tests_to_run=$(sort -u "$tmpfile")

rm "$tmpfile"

if [ "$DRYRUN" == 0 ]; then
    if [ -z "$LOGDIR" ]; then
	logdir=$(mktemp -d)
    else
	logdir=$LOGDIR/testy
	mkdir -p "$logdir"
    fi

    for testfile in $tests_to_run; do
	testname=$(basename "$testfile")

	run_test "$testfile"				\
	    |& sed "s/^/[$testname] /" > "$logdir/${testname}.log" &

	sleep 2
    done

    for job in $(jobs -p); do
	wait "$job" || ret=1
    done

    # shellcheck disable=SC2044
    for testlog in $(find "$logdir" -type f); do
	line=$(tail -n1 "$testlog")
	case $line in
	    *SUCCESS:*)
		echo "$line"
		;;
	    *)
		cat "$testlog"
		;;
	esac
    done

    if [ -z "$LOGDIR" ]; then
	rm -rf "$logdir"
    fi
else
    echo "$tests_to_run"
fi

exit $ret
