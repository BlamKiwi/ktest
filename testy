#!/bin/bash
#
# testy - given a list of files to test, run tests that apply to those files (or
# optionally just print them out)

set -o nounset
set -o errexit
set -o pipefail
export PS4='+`basename ${BASH_SOURCE[0]}`:${LINENO}:${FUNCNAME[0]:+${FUNCNAME[0]}()}+ '

shellcheck "$0"

KTESTDIR=$(dirname "$(readlink -f "$0")")

# hack:
ACTEST="/src/appliance-clustest/actest -i /usr/share/DateraAppliance/DaterOS-sda.raw"

DRYRUN=0
PRIORITY=0
OUTPUT_DIR=""
KTESTARGS=""

# hack
( cd "$KTESTDIR/kmo-batch" && make kmo-batch )

read_tests()
{
    # For every pattern/test in the test list, if $file matches the pattern
    # print out the corresponding test:

    local file=$1
    local dir=$2
    local testlist="$dir/tests.testy"

    [[ -e $testlist ]] || return 0

    sed -e 's/#.*//' "$testlist"				\
	|while read line; do
	    [[ -z $line ]] && continue

            # shellcheck disable=SC2086
	    set $line

	    if [[ $# != 3 ]]; then
                echo "Malformed line in ${testlist}:" >&2
                echo "Expect <priority> <pattern> <test>" >&2
                echo "Got $line" >&2
                exit 1
            fi

	    priority=$1
	    shift
	    pattern=$dir/$1
	    shift

	    ((priority > PRIORITY)) && continue

	    # strip off a trailing / or /. from $pattern
	    pattern=${pattern%/}
	    pattern=${pattern%/.}

	    for i in $pattern; do
		if [[ $file = "$i" ||				\
		      ${i##$file/} != "$i" ||			\
		      ${file##$i/} != "$file" ]]; then
		    if ! readlink -e "$dir/$1" ; then
			echo "test $dir/$1 not found" >&2
			exit 1
		    fi
		    break
		fi
	    done
	done
}

get_tests()
{
    # Given a list of files to test, find test lists in the same directory as
    # the file to test or any parent directory

    while read i ; do  
	[[ -e "$i" ]] || continue

        local file=$(readlink -fn "$i")
	local dir="$file"

	(find "$dir" -name tests.testy 2>/dev/null || true)	\
	    |while read testlist; do
		read_tests "$file" "$(dirname "$testlist")"
	    done

	while [[ $dir != / ]]; do
	    dir=$(dirname "$dir")
	    read_tests "$file" "$dir"
	done
    done < "$1"
}

run_test()
{
    local testfile=$1
    local testname=$(basename "$testfile")
    local outputdir="$OUTPUT_DIR/$testname"

    echo "Running ${testfile}..."

    case "$testfile" in
	*.ktest)
	    "$KTESTDIR/testy.run-test" "$KTESTDIR/ktest" run		\
		-o "$outputdir" $KTESTARGS "$testfile"
	    ;;
	*.actest)
	    "$KTESTDIR/testy.run-test" "$ACTEST" "$testfile"
	    ;;
	*)
	    "$KTESTDIR/testy.run-test" "$testfile"
	    ;;
    esac
}

usage()
{
    echo "testy: find and run tests for a list of files to test"
    echo "Usage: testy [options] <files>.."
    echo "  -n	    don't run tests, just print them out"
}

while getopts "hnp:k:i:o:x" arg; do
    case $arg in
	h)
	    usage
	    exit 1
	    ;;
	n)
	    DRYRUN=1
	    ;;
	p)
	    PRIORITY=$OPTARG
	    KTESTARGS+=" -p $OPTARG"
	    ;;
	k)
	    KTESTARGS+=" -k $OPTARG"
	    ;;
	i)
	    KTESTARGS+=" -i $OPTARG"
	    ;;
	o)
	    OUTPUT_DIR=$OPTARG
	    ;;
	x)
	    set -x
	    KTESTARGS+=" -x"
	    ;;
    esac
done
shift $((OPTIND - 1))

[[ -z $OUTPUT_DIR ]]	&& OUTPUT_DIR=./testy-out
mkdir -p "$OUTPUT_DIR"

ret=0
tmpfile=$(mktemp)

# If get_tests fail we want the whole script to fail, so we can't call
# it from $(...) -- redirect output to a file then read the file later
# instead.
get_tests "$@" > "$tmpfile"
tests_to_run=$(sort -u "$tmpfile")

rm "$tmpfile"

echo "Running tests:"
echo "$tests_to_run"

if [[ $DRYRUN == 0 ]]; then
    for testfile in $tests_to_run; do
	testname=$(basename "$testfile")

	run_test "$testfile" > "$OUTPUT_DIR/${testname}.log" 2>&1 &
	sleep 2
    done

    for job in $(jobs -p); do
	wait "$job" || ret=1
    done

    for testlog in $(shopt -s nullglob; echo $OUTPUT_DIR/*.log); do
	line=$(tail -n1 "$testlog")

	b=$(basename "$testlog")
	testname=${b%.log}

	case $line in
	    *SUCCESS:*)
		echo "[$testname] $line"
		;;
	    *)
		sed -e "s/^/[$testname] /" "$testlog"
		;;
	esac
    done
else
    echo "$tests_to_run"
fi

echo "Exiting with status $ret"
exit $ret
